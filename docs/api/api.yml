openapi: 3.0.0
info:
  version: '1.0'
  title: articles_api
  description: articles page api
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  # - url: https://api.example.com
  #   description: 本番環境
  - url: http://localhost:8002
    description: 開発環境

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization

security:
  - ApiKeyAuth: []

paths:
  /api/articles/{article_id}/comments:
    get:
      summary: Get all comments for an article
      description: Retrieve a list of comments for the specified article.
      parameters:
        - name: article_id
          in: path
          required: true
          description: ID of the article
          schema:
            type: integer
      responses:
        '200':
          description: A list of comments for the article
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Comment ID
                    user_id:
                      type: integer
                      description: User ID who posted the comment
                    content:
                      type: string
                      description: Content of the comment
                    created_at:
                      type: string
                      format: date-time
                      description: Comment creation timestamp
        '404':
          description: Article not found

    post:
      summary: Add a new comment to an article
      description: Create a new comment for the specified article.
      parameters:
        - name: article_id
          in: path
          required: true
          description: ID of the article
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Content of the comment
                  maxLength: 255
                user_id:
                  type: integer
                  description: ID of the user posting the comment
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Comment ID
                  content:
                    type: string
                  user_id:
                    type: integer
                  article_id:
                    type: integer
                  created_at:
                    type: string
                    format: date-time
        '404':
          description: Article not found
  /api/users/{user_id}/comments:
    get:
      summary: Get all comments for a user
      description: Retrieve a list of comments for the specified user.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: A list of comments for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Comment ID
                    user_id:
                      type: integer
                      description: User ID who posted the comment
                    content:
                      type: string
                      description: Content of the comment
                    created_at:
                      type: string
                      format: date-time
                      description: Comment creation timestamp
        '404':
          description: user not found


  /api/comments/{comment_id}:
    put:
      summary: Update a comment
      description: Update the specified comment by its ID.
      parameters:
        - name: comment_id
          in: path
          required: true
          description: ID of the comment
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Updated content of the comment
                  maxLength: 255
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  content:
                    type: string
                  user_id:
                    type: integer
                  article_id:
                    type: integer
                  updated_at:
                    type: string
                    format: date-time
        '404':
          description: Comment not found

    delete:
      summary: Delete a comment
      description: Remove the specified comment by its ID.
      parameters:
        - name: comment_id
          in: path
          required: true
          description: ID of the comment
          schema:
            type: integer
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment deleted
        '404':
          description: Comment not found

  /api/auth/register:
    post:
      summary: Register a new user
      description: Register a new user by providing an email address. A verification token will be sent to the email address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user
      responses:
        '200':
          description: Verification token sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification token sent.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email address.

  /api/auth/verify:
    post:
      summary: Verify and complete user registration
      description: Verify the user's email using the token and complete registration by setting a name and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The verification token sent via email
                name:
                  type: string
                  description: The name of the user
                password:
                  type: string
                  format: password
                  description: The password for the user
                password_confirmation:
                  type: string
                  format: password
                  description: Confirmation of the password
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User verified and registered successfully.
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token.

  /api/auth/login:
    post:
      summary: Login a user
      description: Authenticate a user by email and password and return an access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user
                password:
                  type: string
                  format: password
                  description: The password for the user
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful.
                  token:
                    type: string
                    description: The generated access token
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid credentials.
